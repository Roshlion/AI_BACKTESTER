"use client";

import React, { useState, useEffect, useMemo } from "react";
import { useRouter } from "next/navigation";
import { Eye, Search, MoreHorizontal } from "lucide-react";
import { MultiTickerChart } from "@/components/MultiTickerChart";
import { useStrategyStore } from "@/app/store/strategyStore";
import { formatIndicators, computeMinMaxDates } from "./utils";

interface TickerInfo {
  ticker: string;
  format?: string;
  records?: number;
  firstDate?: string;
  lastDate?: string;
  sector?: string;
}

export default function DashboardClient() {
  const router = useRouter();
  const setStrategy = useStrategyStore((state) => state.setStrategy);

  const [tickers, setTickers] = useState<TickerInfo[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [search, setSearch] = useState("");
  const [selectedTickers, setSelectedTickers] = useState<string[]>([]);

  // Indicator states
  const [indicators, setIndicators] = useState({
    sma: { enabled: false, period: 50 },
    ema: { enabled: false, period: 20 },
    rsi: { enabled: false },
    macd: { enabled: false },
  });

  // Date range states
  const [dateRange, setDateRange] = useState({
    start: "",
    end: "",
    autoGenerated: false,
  });

  // Load tickers from API
  useEffect(() => {
    async function loadTickers() {
      try {
        const response = await fetch("/api/index");
        const data = await response.json();

        if (data.tickers) {
          let tickerList = Array.isArray(data.tickers)
            ? data.tickers.map((t: any) => (typeof t === "string" ? { ticker: t } : t))
            : [];

          // Try to enrich with manifest data if needed
          const needsEnrichment = tickerList.every(
            (t: any) => t.records == null && t.firstDate == null
          );

          if (needsEnrichment) {
            try {
              const manifestRes = await fetch("/manifest.json", { cache: "no-store" });
              if (manifestRes.ok) {
                const manifest = await manifestRes.json();
                const manifestMap = new Map(
                  (Array.isArray(manifest?.tickers) ? manifest.tickers : []).map((x: any) => [
                    String(x?.ticker ?? "").toUpperCase(),
                    x,
                  ])
                );
                tickerList = tickerList.map((t: any) => {
                  const enriched = manifestMap.get(t.ticker);
                  return enriched ? { ...t, ...enriched } : t;
                });
              }
            } catch {
              // Continue without enrichment
            }
          }

          setTickers(tickerList);
        }
      } catch (err) {
        setError("Failed to load tickers");
        console.error("Error loading tickers:", err);
      } finally {
        setLoading(false);
      }
    }

    loadTickers();
  }, []);

  // Auto-compute date range when first ticker is selected
  useEffect(() => {
    if (selectedTickers.length > 0 && !dateRange.autoGenerated) {
      const selectedTickerData = tickers.filter((t) =>
        selectedTickers.includes(t.ticker)
      );
      const { start, end } = computeMinMaxDates(selectedTickerData);

      if (start && end) {
        setDateRange({
          start,
          end,
          autoGenerated: true,
        });
      }
    }
  }, [selectedTickers, tickers, dateRange.autoGenerated]);

  const filteredTickers = useMemo(() => {
    return tickers.filter((ticker) =>
      ticker.ticker.toLowerCase().includes(search.toLowerCase())
    );
  }, [tickers, search]);

  const handleTickerToggle = (ticker: string) => {
    setSelectedTickers((prev) =>
      prev.includes(ticker)
        ? prev.filter((t) => t !== ticker)
        : [...prev, ticker]
    );
  };

  const handleIsolate = (ticker: string) => {
    setSelectedTickers([ticker]);
  };

  const handleEyeClick = (ticker: string) => {
    router.push(`/explore?symbol=${ticker}`);
  };

  const handleIndicatorToggle = (indicator: keyof typeof indicators) => {
    setIndicators((prev) => ({
      ...prev,
      [indicator]: {
        ...prev[indicator],
        enabled: !prev[indicator].enabled,
      },
    }));
  };

  const handleIndicatorPeriodChange = (
    indicator: "sma" | "ema",
    period: number
  ) => {
    setIndicators((prev) => ({
      ...prev,
      [indicator]: {
        ...prev[indicator],
        period,
      },
    }));
  };

  const handleCreateStrategy = () => {
    const indicatorsList = formatIndicators(indicators);
    setStrategy({
      tickers: selectedTickers,
      indicators: indicatorsList,
      start: dateRange.start || undefined,
      end: dateRange.end || undefined,
    });
    router.push("/strategy");
  };

  const resetDateRange = () => {
    const selectedTickerData = tickers.filter((t) =>
      selectedTickers.includes(t.ticker)
    );
    const { start, end } = computeMinMaxDates(selectedTickerData);

    setDateRange({
      start: start || "",
      end: end || "",
      autoGenerated: true,
    });
  };

  if (loading) {
    return (
      <div className="p-6 text-gray-300">
        <div className="animate-spin w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full"></div>
        Loading...
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6 text-red-400">
        Error: {error}
      </div>
    );
  }

  return (
    <div className="container mx-auto px-6 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white mb-2">Dashboard</h1>
        <p className="text-gray-400">
          Select multiple tickers, configure indicators, and create trading strategies
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Panel - Ticker Selection */}
        <div className="lg:col-span-1 space-y-4">
          {/* Ticker Search and List */}
          <div className="bg-gray-800 rounded-lg p-4">
            <h3 className="text-lg font-semibold text-white mb-3">
              Select Tickers ({selectedTickers.length} selected)
            </h3>

            {/* Search */}
            <div className="relative mb-3">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search tickers..."
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="w-full pl-10 pr-3 py-2 bg-gray-700 border border-gray-600 rounded text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
              />
            </div>

            {/* Ticker List */}
            <div className="max-h-96 overflow-y-auto">
              {filteredTickers.length === 0 ? (
                <p className="text-gray-400">No tickers found</p>
              ) : (
                <div className="space-y-1">
                  {filteredTickers.map((ticker) => (
                    <div
                      key={ticker.ticker}
                      className={`relative flex items-center p-3 rounded cursor-pointer transition-colors ${
                        selectedTickers.includes(ticker.ticker)
                          ? "bg-blue-600/30 border border-blue-500/50"
                          : "bg-gray-700 hover:bg-gray-600"
                      }`}
                      onClick={() => handleTickerToggle(ticker.ticker)}
                    >
                      <div className="flex-1">
                        <div className="font-medium text-white">{ticker.ticker}</div>
                        {ticker.records && (
                          <div className="text-xs text-gray-400">
                            {ticker.records.toLocaleString()} records
                          </div>
                        )}
                      </div>

                      {/* Action Icons */}
                      <div className="flex items-center space-x-2" onClick={(e) => e.stopPropagation()}>
                        <button
                          onClick={() => handleEyeClick(ticker.ticker)}
                          className="p-1 text-gray-400 hover:text-blue-400 transition-colors"
                          title="Open in Data Warehouse"
                          aria-label="Open in Data Warehouse"
                        >
                          <Eye className="w-4 h-4" />
                        </button>

                        <div className="relative group">
                          <button
                            className="p-1 text-gray-400 hover:text-white transition-colors"
                            title="More actions"
                          >
                            <MoreHorizontal className="w-4 h-4" />
                          </button>
                          <div className="absolute right-0 top-6 bg-gray-700 border border-gray-600 rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-10">
                            <button
                              onClick={() => handleIsolate(ticker.ticker)}
                              className="block w-full text-left px-3 py-2 text-sm text-white hover:bg-gray-600"
                              title="Isolate this ticker"
                              aria-label="Isolate this ticker"
                            >
                              Isolate
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Selected Tickers Display */}
          {selectedTickers.length > 0 && (
            <div className="bg-blue-900/30 rounded-lg p-4 border border-blue-700">
              <h4 className="text-white font-medium mb-2">Selected Tickers</h4>
              <div className="flex flex-wrap gap-2">
                {selectedTickers.map((ticker) => (
                  <span
                    key={ticker}
                    className="px-2 py-1 bg-blue-600 text-white text-sm rounded"
                  >
                    {ticker}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* Indicators */}
          <div className="bg-gray-800 rounded-lg p-4">
            <h4 className="text-white font-medium mb-3">Indicators</h4>
            <div className="space-y-3">
              {/* SMA */}
              <div className="flex items-center space-x-3">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={indicators.sma.enabled}
                    onChange={() => handleIndicatorToggle("sma")}
                    className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                  />
                  <span className="ml-2 text-white">SMA</span>
                </label>
                {indicators.sma.enabled && (
                  <input
                    type="number"
                    value={indicators.sma.period}
                    onChange={(e) =>
                      handleIndicatorPeriodChange("sma", parseInt(e.target.value) || 50)
                    }
                    className="w-16 px-2 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm"
                    min="1"
                    max="200"
                  />
                )}
              </div>

              {/* EMA */}
              <div className="flex items-center space-x-3">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={indicators.ema.enabled}
                    onChange={() => handleIndicatorToggle("ema")}
                    className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                  />
                  <span className="ml-2 text-white">EMA</span>
                </label>
                {indicators.ema.enabled && (
                  <input
                    type="number"
                    value={indicators.ema.period}
                    onChange={(e) =>
                      handleIndicatorPeriodChange("ema", parseInt(e.target.value) || 20)
                    }
                    className="w-16 px-2 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm"
                    min="1"
                    max="200"
                  />
                )}
              </div>

              {/* RSI */}
              <div className="flex items-center space-x-3">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={indicators.rsi.enabled}
                    onChange={() => handleIndicatorToggle("rsi")}
                    className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                  />
                  <span className="ml-2 text-white">RSI (14)</span>
                </label>
              </div>

              {/* MACD */}
              <div className="flex items-center space-x-3">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={indicators.macd.enabled}
                    onChange={() => handleIndicatorToggle("macd")}
                    className="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                  />
                  <span className="ml-2 text-white">MACD (12,26,9)</span>
                </label>
              </div>
            </div>
          </div>

          {/* Date Range */}
          <div className="bg-gray-800 rounded-lg p-4">
            <h4 className="text-white font-medium mb-3">Date Range</h4>
            <div className="space-y-3">
              <div>
                <label className="block text-sm text-gray-300 mb-1">Start Date</label>
                <input
                  type="date"
                  value={dateRange.start}
                  onChange={(e) =>
                    setDateRange((prev) => ({ ...prev, start: e.target.value, autoGenerated: false }))
                  }
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:outline-none focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm text-gray-300 mb-1">End Date</label>
                <input
                  type="date"
                  value={dateRange.end}
                  onChange={(e) =>
                    setDateRange((prev) => ({ ...prev, end: e.target.value, autoGenerated: false }))
                  }
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white focus:outline-none focus:border-blue-500"
                />
              </div>
              <button
                onClick={resetDateRange}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded text-gray-300 hover:bg-gray-600 transition-colors text-sm"
              >
                Reset to Full Range
              </button>
            </div>
          </div>

          {/* Create Strategy Button */}
          {selectedTickers.length > 0 && (
            <button
              onClick={handleCreateStrategy}
              className="w-full px-4 py-3 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors"
              aria-label="Create a strategy with selected tickers"
            >
              Create a strategy with this
            </button>
          )}
        </div>

        {/* Right Panel - Chart */}
        <div className="lg:col-span-2">
          {selectedTickers.length > 0 ? (
            <MultiTickerChart
              tickers={selectedTickers}
              indicators={indicators}
              dateRange={dateRange.start && dateRange.end ? { start: dateRange.start, end: dateRange.end } : undefined}
            />
          ) : (
            <div className="bg-gray-800 rounded-lg p-8 text-center">
              <div className="text-gray-400 mb-4">
                <svg className="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a 2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
              </div>
              <h3 className="text-xl font-semibold text-white mb-2">
                Select Tickers to View Chart
              </h3>
              <p className="text-gray-400">
                Choose one or more stock tickers from the list to display their historical price data and interactive chart.
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Status Bar */}
      <div className="mt-8 p-4 bg-gray-800 rounded-lg border border-gray-700">
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
              <span className="text-gray-300">Data Source: S3</span>
            </div>
            <div className="flex items-center">
              <div className="w-2 h-2 bg-blue-500 rounded-full mr-2"></div>
              <span className="text-gray-300">API Status: Active</span>
            </div>
          </div>
          <div className="text-gray-400">
            Last Updated: {new Date().toLocaleString()}
          </div>
        </div>
      </div>
    </div>
  );
}